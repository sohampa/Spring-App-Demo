name : Java CI with Maven
on : 
  push :
    branches : [ master ]
  pull_request :
    branches : [ master ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:

jobs :

  print-using-events :
    runs-on : pranav_linux
    steps: 
       - name : print event
         run : echo '${{ toJSON(github.event) }}'
         # shell : bash
  CI :
    strategy:
      fail-fast: true
      matrix: 
       java-version : [17]
       
    runs-on : pranav_linux
    steps :
      - name : Checkout Code
        uses : actions/checkout@v3
      - name : Hello World
        run : echo "Hello World"
        shell : bash

  # Setup JDK 17
      - name : Set up JDK 17
        uses : actions/setup-java@v3.12.0
        with :
          distribution: 'oracle'
          java-version : ${{ matrix.java-version }}

  # Build Java Project
      - name : Build with Maven
        run : mvn clean install
        
  # Sonarqube Scanner
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 


# Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"


      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Fail the job on critical or high vulnerabilities
        run: |
             vulnerability_count=$(cat trivy-results.json | jq -r '.runs[0].results[] | select(.level == "error" or .level == "warning") | .ruleId' | sort | uniq -c | wc -l)
             if [ "$vulnerability_count" -gt 0 ]; then
             echo "Found $vulnerability_count vulnerabilities. Failing the job."
             exit 1
             else
             echo "No critical or high vulnerabilities found."
             fi
        
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: 'trivy-results.sarif'

 # Building Dockerfile
      - name : Build Image and Push To Artifactory
        run : | 
               docker build -t 172.27.59.80:8082/docker-pranav/spring_boot:${{ github.run_number }} .
               docker login -u ${{ secrets.JFROG_USERNAME }} -p ${{ secrets.JFROG_PASSWORD }} http://172.27.59.80:8082
               docker push 172.27.59.80:8082/docker-pranav/spring_boot:${{ github.run_number }}  


# Trivy Scan for an Image
      - name : Trivy Image Scanning
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 172.27.59.80:8082/docker-pranav/spring_boot:${{ github.run_number }}
          format: 'table'
          # exit-code: '1'
          ignore-unfixed: true
          # vuln-type: 'os,library'
          scan-type: image
          severity: 'CRITICAL,HIGH' 

# Slack Notification
      - name: slack-send
        if: always() # This step will always run
  # You may pin to the exact commit or the version.
        uses: slackapi/slack-github-action@v1.24.0
        with:
    # For posting a rich message using Block Kit
         payload: |
          {
          "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
              }
            }
          ]
          }
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
    
